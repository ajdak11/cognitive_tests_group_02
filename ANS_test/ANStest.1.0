import time
import random
from IPython.display import HTML, clear_output, display

results_dict = {
    'imagename': [],
    'nL': [],
    'nR': [],
    'ratio': [],
    'correct': []
}

#Data consent 
data_consent_info = """DATA CONSENT INFORMATION:

Please read:

We wish to record your response data
to an anonymised public data repository. 
Your data will be used for educational teaching purposes
practising data analysis and visualisation.

Please type   yes   in the box below if you consent to the upload."""

print(data_consent_info)
result = input("> ") 

if result == "yes": 
    print("Thanks for your participation.")
    print("Please contact a.fedorec@ucl.ac.uk")
    print("If you have any questions or concerns")
    print("regarding the stored results.")
    
else: 
    #End code execution by raising an exception
    raise(Exception("User did not consent to continue test."))


# Name and age questions
print("Welcome to the ANS Test")
id_instructions = """

Enter your anonymised ID

To generate an anonymous 4-letter unique user identifier please enter in all capitals:
- two letters based on the initials (first and last name) of a childhood friend
- two letters based on the initials (first and last name) of a favourite actor / actress

e.g. if your friend was called Charlie Brown and film star was Tom Cruise
     then your unique identifier would be CBTC
"""

print(id_instructions)
user_id = input("> ")
user_data['user_id'] = user_id

ans_age = input("Please enter your age: ")
user_data['age'] = ans_age
clear_output(wait=True)

gender = input("Please enter your gender (m/f/o): ")
clear_output(wait=True)
user_data['gender'] = gender

print("Thank you. The test will start now.") 

user_data = {'user_id': user_id,
             'age': ans_age, 
             'gender': gender, 
            }

#Function for ANS test introduction 
def ans_test_intro(): 
    print(" Welcome to the ANS test.")
    time.sleep(2)
    print("Two circles containing dots will appear on the screen for 0.75s.") 
    time.sleep(3.5)
    print("Your task is to select the circle with more dots within 3 seconds.") 
    time.sleep(3.5)
    print("To select the left circle, enter '1'. To select the right circle, enter '2'.")
    time.sleep(3.5) 
    print("Your test will start now.") 
    time.sleep(2)
    print("3")
    time.sleep(1) 
    print("2")
    time.sleep(1) 
    print("1")
    time.sleep(1) 

#Function to display the images of the ANS test 
def display_circles (image_name):
    img_html = HTML(f"<img src='{image_name}' alt='Image' style='width: 1200px;'>")
    display(img_html)
   
#Function for ANS test 
def ans_test (image_name, image_nL, image_nR): 
    score = 0
    image_answer = 0
    ratio = 0
    image_nL_int = int(image_nL) 
    image_nR_int = int(image_nR) 
    for image_name, image_nL, image_nR in image_nLR.items():
        
        display_circles(image_name) 
        time.sleep(0.75) 
        clear_output() 
        
        user_answer = int(input("'1' for left, '2' for right: "))
        time.sleep(3) 
        
        if image_nL_int > image_nR_int: 
            ratio = image_nR_int/image_nL_int
            image_answer = 1 
        if image_nL_int < image_nR_int: 
            ratio = image_nL_int/image_nR_int
            image_answer = 2
            
        if user_answer == image_answer:
            score += 1
            results_dict['correct'].append(1)
            print("Correct!")
        else : 
            print ("Incorrect") 
            results_dict['correct'].append(0) 

        results_dict['imagename'].append(image_name) 
        results_dict['nL'].append(image_nL) 
        results_dict['nR'].append(image_nR) 
        results_dict['ratio'].append(ratio) 
        print("Next question:")
        print(results_dict) 
        print(image_answer) 
        print(ratio)
        print(image_nL_int) 
        print(image_nR_int) 
        time.sleep(100000) 
    
    return score, ratio

#Dictionary for images and number of dots on left and right
image_nLR = { 
    '10 vs 9.png' : {'nL':10, 'nR':9},
    '12 vs 9.png' : {'nL':12,'nR':9},
    '14 vs 12.png' :{14,12}, 
    '16 vs 12.png' :{16,12},
    '18 vs 16.png' : {18,16}, 
    '20 vs 15.png' : {20,15},
    '20 vs 18.png' : {20,18}, 
    '21 vs 18.png' : {21,18}, 
    '9 vs 10.png' : {9,10},  
    '9 vs 12.png' : {9,12}, 
    '12 vs 14.png' : {12,14}, 
    '12 vs 16.png' : {12,16},  
    '16 vs 18.png' : {16,18}, 
    '15 vs 20.png' : {15,20}, 
    '18 vs 20.png' : {18,20}, 
    '18 vs 21.png' : {18,21},
}

#Full test 
def full_ans_test(image_nLR): 
    total_score = 0 
    for image_name, image_nLR in image_nLR.items(): 
        score = ans_test(image_name, image_nLR, image_nLR) 
        total_score += score 
        return total_score
    print(f"Thank you for participating. Your total score was: {total_score}")

#Sending to google form
def send_to_google_form(results, form_url):
    form_id = form_url[34:90]
    view_form_url = f'https://docs.google.com/forms/d/e/{form_id}/viewform'
    post_form_url = f'https://docs.google.com/forms/d/e/{form_id}/formResponse'

    page = requests.get(view_form_url)
    content = BeautifulSoup(page.content, "html.parser").find('script', type='text/javascript')
    content = content.text[27:-1]
    result = json.loads(content)[1][1]
    form_dict = {}
    
    loaded_all = True
    for item in result:
        if item[1] not in data_dict:
            print(f"Form item {item[1]} not found. Data not uploaded.")
            loaded_all = False
            return False
        form_dict[f'entry.{item[4][0][0]}'] = data_dict[item[1]]
    
    post_result = requests.post(post_form_url, data=form_dict)
    return post_result.ok

results = full_ans_test(image_nLR) 
url = https://docs.google.com/forms/d/e/1FAIpQLSe-Kyr44RWzIdFrfWIBA1sKjlj-O6XdU2nBzIns53hkdK7uug/viewform?usp=sf_link

send_to_google_form(results, url) 
